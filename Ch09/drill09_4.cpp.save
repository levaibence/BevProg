#include "std_lib_facilities.h"

class month
{
public:
	Month month;
private:
	enum name
	{ //months as enum class so we can print out month name
		jan = 1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec
	};
	int value;
};

class Year
{ // year in [min:max) range
        static const int min = 1800;
        static const int max = 2200;
public:
        class Invalid {};
        Year(int x) : y{x} { if (x<min || max<=x) throw Invalid{}; }
        int year() { return y; }
private:
        int y;
};

Year operator++ (Year y) //incrementers for Year
{
	return Year{y.year()+1}
}

Year operator-- (Year y) //incrementers for Year
{
        return Year{y.year()-11}
}

// simple Date (use Month type)
class Date
{
public:
	Date(Year y, Month m, int d); // check for valid date and initialize
	void add_day(int n); //add n days to date, rolling over months and years if needed
	int day() {return d;} //get year, month, day
	Month month() {return m;}
	int year() {return Year::year()};
	// . . .
private:
	Year y;
	Month m;
	int d; // day
};

Date::Date(Year year, Month month, int day) //initializes dates
{
	if (month>12||month<1) error("Invalid month value!");
	if (day>31||day<1) error("Invalid day value!"); //checks for invalid values before initializations
	Date::y = year;
	Date::m = month;
	Date::d = day;
	return;
}

void Date::add_day(int n) //adds n days to the date in question
{
	d += n;
	while (d > 31||d < 0) //keep incrementing months until date is valid
	{
		if (d>31) {d-=31; m++;}
		else {d+=31; m--;}
	}
	while (m > 12||m < 0) //once done, do the same thing with years
        {
                if (m>12) {m-=12; y++;}
                else {m+=12; y--;}
	}
	return;
}

ostream& operator<<(ostream& os, Month& m) //overload << to work with month
{
	switch (m)
	{
		case Month::jan: os << "January"; break; //converts enum into readable string
                case Month::feb: os << "February"; break;
                case Month::mar: os << "March"; break;
                case Month::apr: os << "April"; break;
                case Month::may: os << "May"; break;
                case Month::jun: os << "June"; break;
                case Month::jul: os << "July"; break;
                case Month::aug: os << "August"; break;
                case Month::sep: os << "September"; break;
                case Month::oct: os << "October"; break;
                case Month::nov: os << "November"; break;
                case Month::dec: os << "December"; break;
	}
	return os;
}

ostream& operator<<(ostream& os, Date& d) //do same with date
{
        return os << d.year() << ". " << d.month() << ". " << d.day() << ".";
}


int main()
{
	try
	{
		Date today {Year{1978}, Month::jun, 25}; //define today
		Date tomorrow = today;
		tomorrow.add_day(1); //increment today to get tomorrow
		cout << "Today: " << today << "\nTomorrow: " << tomorrow << endl;
		return 0;
	}
	catch (exception& e)
	{
		cerr << "Error: " << e.what() << '\n';
		keep_window_open();
	        return 1;
	}
	catch (...) {
		cerr << "Undefined exception occured!\n";
		return 2;
	}
}
